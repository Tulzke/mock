// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/mock/mockgen/internal/tests/import_mode (interfaces: DemocracyFan,SuperEarthCitizen,Projectile,Gun,Shooter,HelldiverRifleShooter,HelldiverRocketMan,PotentialTraitor,AgitationCampaign)
//
// Generated by this command:
//
//	mockgen -typed -package=mock -destination=mock/interfaces.go . DemocracyFan,SuperEarthCitizen,Projectile,Gun,Shooter,HelldiverRifleShooter,HelldiverRocketMan,PotentialTraitor,AgitationCampaign
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	import_mode "go.uber.org/mock/mockgen/internal/tests/import_mode"
	guns "go.uber.org/mock/mockgen/internal/tests/import_mode/guns"
	stratagems "go.uber.org/mock/mockgen/internal/tests/import_mode/stratagems"
)

// MockDemocracyFan is a mock of DemocracyFan interface.
type MockDemocracyFan struct {
	ctrl     *gomock.Controller
	recorder *MockDemocracyFanMockRecorder
}

// MockDemocracyFanMockRecorder is the mock recorder for MockDemocracyFan.
type MockDemocracyFanMockRecorder struct {
	mock *MockDemocracyFan
}

// NewMockDemocracyFan creates a new mock instance.
func NewMockDemocracyFan(ctrl *gomock.Controller) *MockDemocracyFan {
	mock := &MockDemocracyFan{ctrl: ctrl}
	mock.recorder = &MockDemocracyFanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemocracyFan) EXPECT() *MockDemocracyFanMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockDemocracyFan) ISGOMOCK() struct{} {
	return struct{}{}
}

// ILoveDemocracy mocks base method.
func (m *MockDemocracyFan) ILoveDemocracy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ILoveDemocracy")
}

// ILoveDemocracy indicates an expected call of ILoveDemocracy.
func (mr *MockDemocracyFanMockRecorder) ILoveDemocracy() *MockDemocracyFanILoveDemocracyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ILoveDemocracy", reflect.TypeOf((*MockDemocracyFan)(nil).ILoveDemocracy))
	return &MockDemocracyFanILoveDemocracyCall{Call: call}
}

// MockDemocracyFanILoveDemocracyCall wrap *gomock.Call
type MockDemocracyFanILoveDemocracyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDemocracyFanILoveDemocracyCall) Return() *MockDemocracyFanILoveDemocracyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDemocracyFanILoveDemocracyCall) Do(f func()) *MockDemocracyFanILoveDemocracyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDemocracyFanILoveDemocracyCall) DoAndReturn(f func()) *MockDemocracyFanILoveDemocracyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// YouWillNeverDestroyOurWayOfLife mocks base method.
func (m *MockDemocracyFan) YouWillNeverDestroyOurWayOfLife() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YouWillNeverDestroyOurWayOfLife")
}

// YouWillNeverDestroyOurWayOfLife indicates an expected call of YouWillNeverDestroyOurWayOfLife.
func (mr *MockDemocracyFanMockRecorder) YouWillNeverDestroyOurWayOfLife() *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YouWillNeverDestroyOurWayOfLife", reflect.TypeOf((*MockDemocracyFan)(nil).YouWillNeverDestroyOurWayOfLife))
	return &MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall{Call: call}
}

// MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall wrap *gomock.Call
type MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall) Return() *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall) Do(f func()) *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall) DoAndReturn(f func()) *MockDemocracyFanYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSuperEarthCitizen is a mock of SuperEarthCitizen interface.
type MockSuperEarthCitizen struct {
	ctrl     *gomock.Controller
	recorder *MockSuperEarthCitizenMockRecorder
}

// MockSuperEarthCitizenMockRecorder is the mock recorder for MockSuperEarthCitizen.
type MockSuperEarthCitizenMockRecorder struct {
	mock *MockSuperEarthCitizen
}

// NewMockSuperEarthCitizen creates a new mock instance.
func NewMockSuperEarthCitizen(ctrl *gomock.Controller) *MockSuperEarthCitizen {
	mock := &MockSuperEarthCitizen{ctrl: ctrl}
	mock.recorder = &MockSuperEarthCitizenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuperEarthCitizen) EXPECT() *MockSuperEarthCitizenMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSuperEarthCitizen) ISGOMOCK() struct{} {
	return struct{}{}
}

// ILoveDemocracy mocks base method.
func (m *MockSuperEarthCitizen) ILoveDemocracy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ILoveDemocracy")
}

// ILoveDemocracy indicates an expected call of ILoveDemocracy.
func (mr *MockSuperEarthCitizenMockRecorder) ILoveDemocracy() *MockSuperEarthCitizenILoveDemocracyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ILoveDemocracy", reflect.TypeOf((*MockSuperEarthCitizen)(nil).ILoveDemocracy))
	return &MockSuperEarthCitizenILoveDemocracyCall{Call: call}
}

// MockSuperEarthCitizenILoveDemocracyCall wrap *gomock.Call
type MockSuperEarthCitizenILoveDemocracyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSuperEarthCitizenILoveDemocracyCall) Return() *MockSuperEarthCitizenILoveDemocracyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSuperEarthCitizenILoveDemocracyCall) Do(f func()) *MockSuperEarthCitizenILoveDemocracyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSuperEarthCitizenILoveDemocracyCall) DoAndReturn(f func()) *MockSuperEarthCitizenILoveDemocracyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// YouWillNeverDestroyOurWayOfLife mocks base method.
func (m *MockSuperEarthCitizen) YouWillNeverDestroyOurWayOfLife() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YouWillNeverDestroyOurWayOfLife")
}

// YouWillNeverDestroyOurWayOfLife indicates an expected call of YouWillNeverDestroyOurWayOfLife.
func (mr *MockSuperEarthCitizenMockRecorder) YouWillNeverDestroyOurWayOfLife() *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YouWillNeverDestroyOurWayOfLife", reflect.TypeOf((*MockSuperEarthCitizen)(nil).YouWillNeverDestroyOurWayOfLife))
	return &MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall{Call: call}
}

// MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall wrap *gomock.Call
type MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall) Return() *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall) Do(f func()) *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall) DoAndReturn(f func()) *MockSuperEarthCitizenYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProjectile is a mock of Projectile interface.
type MockProjectile struct {
	ctrl     *gomock.Controller
	recorder *MockProjectileMockRecorder
}

// MockProjectileMockRecorder is the mock recorder for MockProjectile.
type MockProjectileMockRecorder struct {
	mock *MockProjectile
}

// NewMockProjectile creates a new mock instance.
func NewMockProjectile(ctrl *gomock.Controller) *MockProjectile {
	mock := &MockProjectile{ctrl: ctrl}
	mock.recorder = &MockProjectileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectile) EXPECT() *MockProjectileMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockProjectile) ISGOMOCK() struct{} {
	return struct{}{}
}

// Explosive mocks base method.
func (m *MockProjectile) Explosive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explosive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Explosive indicates an expected call of Explosive.
func (mr *MockProjectileMockRecorder) Explosive() *MockProjectileExplosiveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explosive", reflect.TypeOf((*MockProjectile)(nil).Explosive))
	return &MockProjectileExplosiveCall{Call: call}
}

// MockProjectileExplosiveCall wrap *gomock.Call
type MockProjectileExplosiveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectileExplosiveCall) Return(arg0 bool) *MockProjectileExplosiveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectileExplosiveCall) Do(f func() bool) *MockProjectileExplosiveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectileExplosiveCall) DoAndReturn(f func() bool) *MockProjectileExplosiveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FlightRange mocks base method.
func (m *MockProjectile) FlightRange() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlightRange")
	ret0, _ := ret[0].(int)
	return ret0
}

// FlightRange indicates an expected call of FlightRange.
func (mr *MockProjectileMockRecorder) FlightRange() *MockProjectileFlightRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlightRange", reflect.TypeOf((*MockProjectile)(nil).FlightRange))
	return &MockProjectileFlightRangeCall{Call: call}
}

// MockProjectileFlightRangeCall wrap *gomock.Call
type MockProjectileFlightRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectileFlightRangeCall) Return(arg0 int) *MockProjectileFlightRangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectileFlightRangeCall) Do(f func() int) *MockProjectileFlightRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectileFlightRangeCall) DoAndReturn(f func() int) *MockProjectileFlightRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Speed mocks base method.
func (m *MockProjectile) Speed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Speed")
	ret0, _ := ret[0].(int)
	return ret0
}

// Speed indicates an expected call of Speed.
func (mr *MockProjectileMockRecorder) Speed() *MockProjectileSpeedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Speed", reflect.TypeOf((*MockProjectile)(nil).Speed))
	return &MockProjectileSpeedCall{Call: call}
}

// MockProjectileSpeedCall wrap *gomock.Call
type MockProjectileSpeedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectileSpeedCall) Return(arg0 int) *MockProjectileSpeedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectileSpeedCall) Do(f func() int) *MockProjectileSpeedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectileSpeedCall) DoAndReturn(f func() int) *MockProjectileSpeedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGun is a mock of Gun interface.
type MockGun[ProjectileType import_mode.Projectile] struct {
	ctrl     *gomock.Controller
	recorder *MockGunMockRecorder[ProjectileType]
}

// MockGunMockRecorder is the mock recorder for MockGun.
type MockGunMockRecorder[ProjectileType import_mode.Projectile] struct {
	mock *MockGun[ProjectileType]
}

// NewMockGun creates a new mock instance.
func NewMockGun[ProjectileType import_mode.Projectile](ctrl *gomock.Controller) *MockGun[ProjectileType] {
	mock := &MockGun[ProjectileType]{ctrl: ctrl}
	mock.recorder = &MockGunMockRecorder[ProjectileType]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGun[ProjectileType]) EXPECT() *MockGunMockRecorder[ProjectileType] {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockGun[ProjectileType]) ISGOMOCK() struct{} {
	return struct{}{}
}

// Ammo mocks base method.
func (m *MockGun[ProjectileType]) Ammo() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ammo")
	ret0, _ := ret[0].(int)
	return ret0
}

// Ammo indicates an expected call of Ammo.
func (mr *MockGunMockRecorder[ProjectileType]) Ammo() *MockGunAmmoCall[ProjectileType] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ammo", reflect.TypeOf((*MockGun[ProjectileType])(nil).Ammo))
	return &MockGunAmmoCall[ProjectileType]{Call: call}
}

// MockGunAmmoCall wrap *gomock.Call
type MockGunAmmoCall[ProjectileType import_mode.Projectile] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGunAmmoCall[ProjectileType]) Return(arg0 int) *MockGunAmmoCall[ProjectileType] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGunAmmoCall[ProjectileType]) Do(f func() int) *MockGunAmmoCall[ProjectileType] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGunAmmoCall[ProjectileType]) DoAndReturn(f func() int) *MockGunAmmoCall[ProjectileType] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shoot mocks base method.
func (m *MockGun[ProjectileType]) Shoot(times int) []ProjectileType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shoot", times)
	ret0, _ := ret[0].([]ProjectileType)
	return ret0
}

// Shoot indicates an expected call of Shoot.
func (mr *MockGunMockRecorder[ProjectileType]) Shoot(times any) *MockGunShootCall[ProjectileType] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shoot", reflect.TypeOf((*MockGun[ProjectileType])(nil).Shoot), times)
	return &MockGunShootCall[ProjectileType]{Call: call}
}

// MockGunShootCall wrap *gomock.Call
type MockGunShootCall[ProjectileType import_mode.Projectile] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGunShootCall[ProjectileType]) Return(arg0 []ProjectileType) *MockGunShootCall[ProjectileType] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGunShootCall[ProjectileType]) Do(f func(int) []ProjectileType) *MockGunShootCall[ProjectileType] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGunShootCall[ProjectileType]) DoAndReturn(f func(int) []ProjectileType) *MockGunShootCall[ProjectileType] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockShooter is a mock of Shooter interface.
type MockShooter[ProjectileType import_mode.Projectile, GunType import_mode.Gun[ProjectileType]] struct {
	ctrl     *gomock.Controller
	recorder *MockShooterMockRecorder[ProjectileType, GunType]
}

// MockShooterMockRecorder is the mock recorder for MockShooter.
type MockShooterMockRecorder[ProjectileType import_mode.Projectile, GunType import_mode.Gun[ProjectileType]] struct {
	mock *MockShooter[ProjectileType, GunType]
}

// NewMockShooter creates a new mock instance.
func NewMockShooter[ProjectileType import_mode.Projectile, GunType import_mode.Gun[ProjectileType]](ctrl *gomock.Controller) *MockShooter[ProjectileType, GunType] {
	mock := &MockShooter[ProjectileType, GunType]{ctrl: ctrl}
	mock.recorder = &MockShooterMockRecorder[ProjectileType, GunType]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShooter[ProjectileType, GunType]) EXPECT() *MockShooterMockRecorder[ProjectileType, GunType] {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockShooter[ProjectileType, GunType]) ISGOMOCK() struct{} {
	return struct{}{}
}

// Gun mocks base method.
func (m *MockShooter[ProjectileType, GunType]) Gun() GunType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gun")
	ret0, _ := ret[0].(GunType)
	return ret0
}

// Gun indicates an expected call of Gun.
func (mr *MockShooterMockRecorder[ProjectileType, GunType]) Gun() *MockShooterGunCall[ProjectileType, GunType] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gun", reflect.TypeOf((*MockShooter[ProjectileType, GunType])(nil).Gun))
	return &MockShooterGunCall[ProjectileType, GunType]{Call: call}
}

// MockShooterGunCall wrap *gomock.Call
type MockShooterGunCall[ProjectileType import_mode.Projectile, GunType import_mode.Gun[ProjectileType]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockShooterGunCall[ProjectileType, GunType]) Return(arg0 GunType) *MockShooterGunCall[ProjectileType, GunType] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockShooterGunCall[ProjectileType, GunType]) Do(f func() GunType) *MockShooterGunCall[ProjectileType, GunType] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockShooterGunCall[ProjectileType, GunType]) DoAndReturn(f func() GunType) *MockShooterGunCall[ProjectileType, GunType] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reload mocks base method.
func (m *MockShooter[ProjectileType, GunType]) Reload() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockShooterMockRecorder[ProjectileType, GunType]) Reload() *MockShooterReloadCall[ProjectileType, GunType] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockShooter[ProjectileType, GunType])(nil).Reload))
	return &MockShooterReloadCall[ProjectileType, GunType]{Call: call}
}

// MockShooterReloadCall wrap *gomock.Call
type MockShooterReloadCall[ProjectileType import_mode.Projectile, GunType import_mode.Gun[ProjectileType]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockShooterReloadCall[ProjectileType, GunType]) Return(arg0 bool) *MockShooterReloadCall[ProjectileType, GunType] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockShooterReloadCall[ProjectileType, GunType]) Do(f func() bool) *MockShooterReloadCall[ProjectileType, GunType] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockShooterReloadCall[ProjectileType, GunType]) DoAndReturn(f func() bool) *MockShooterReloadCall[ProjectileType, GunType] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shoot mocks base method.
func (m *MockShooter[ProjectileType, GunType]) Shoot(times int, targets ...*import_mode.Enemy) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{times}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shoot", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shoot indicates an expected call of Shoot.
func (mr *MockShooterMockRecorder[ProjectileType, GunType]) Shoot(times any, targets ...any) *MockShooterShootCall[ProjectileType, GunType] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{times}, targets...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shoot", reflect.TypeOf((*MockShooter[ProjectileType, GunType])(nil).Shoot), varargs...)
	return &MockShooterShootCall[ProjectileType, GunType]{Call: call}
}

// MockShooterShootCall wrap *gomock.Call
type MockShooterShootCall[ProjectileType import_mode.Projectile, GunType import_mode.Gun[ProjectileType]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockShooterShootCall[ProjectileType, GunType]) Return(arg0 bool, arg1 error) *MockShooterShootCall[ProjectileType, GunType] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockShooterShootCall[ProjectileType, GunType]) Do(f func(int, ...*import_mode.Enemy) (bool, error)) *MockShooterShootCall[ProjectileType, GunType] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockShooterShootCall[ProjectileType, GunType]) DoAndReturn(f func(int, ...*import_mode.Enemy) (bool, error)) *MockShooterShootCall[ProjectileType, GunType] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHelldiverRifleShooter is a mock of HelldiverRifleShooter interface.
type MockHelldiverRifleShooter struct {
	ctrl     *gomock.Controller
	recorder *MockHelldiverRifleShooterMockRecorder
}

// MockHelldiverRifleShooterMockRecorder is the mock recorder for MockHelldiverRifleShooter.
type MockHelldiverRifleShooterMockRecorder struct {
	mock *MockHelldiverRifleShooter
}

// NewMockHelldiverRifleShooter creates a new mock instance.
func NewMockHelldiverRifleShooter(ctrl *gomock.Controller) *MockHelldiverRifleShooter {
	mock := &MockHelldiverRifleShooter{ctrl: ctrl}
	mock.recorder = &MockHelldiverRifleShooterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelldiverRifleShooter) EXPECT() *MockHelldiverRifleShooterMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHelldiverRifleShooter) ISGOMOCK() struct{} {
	return struct{}{}
}

// AvailableStratagems mocks base method.
func (m *MockHelldiverRifleShooter) AvailableStratagems() []stratagems.Stratagem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableStratagems")
	ret0, _ := ret[0].([]stratagems.Stratagem)
	return ret0
}

// AvailableStratagems indicates an expected call of AvailableStratagems.
func (mr *MockHelldiverRifleShooterMockRecorder) AvailableStratagems() *MockHelldiverRifleShooterAvailableStratagemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableStratagems", reflect.TypeOf((*MockHelldiverRifleShooter)(nil).AvailableStratagems))
	return &MockHelldiverRifleShooterAvailableStratagemsCall{Call: call}
}

// MockHelldiverRifleShooterAvailableStratagemsCall wrap *gomock.Call
type MockHelldiverRifleShooterAvailableStratagemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRifleShooterAvailableStratagemsCall) Return(arg0 []stratagems.Stratagem) *MockHelldiverRifleShooterAvailableStratagemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRifleShooterAvailableStratagemsCall) Do(f func() []stratagems.Stratagem) *MockHelldiverRifleShooterAvailableStratagemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRifleShooterAvailableStratagemsCall) DoAndReturn(f func() []stratagems.Stratagem) *MockHelldiverRifleShooterAvailableStratagemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Gun mocks base method.
func (m *MockHelldiverRifleShooter) Gun() *guns.Rifle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gun")
	ret0, _ := ret[0].(*guns.Rifle)
	return ret0
}

// Gun indicates an expected call of Gun.
func (mr *MockHelldiverRifleShooterMockRecorder) Gun() *MockHelldiverRifleShooterGunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gun", reflect.TypeOf((*MockHelldiverRifleShooter)(nil).Gun))
	return &MockHelldiverRifleShooterGunCall{Call: call}
}

// MockHelldiverRifleShooterGunCall wrap *gomock.Call
type MockHelldiverRifleShooterGunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRifleShooterGunCall) Return(arg0 *guns.Rifle) *MockHelldiverRifleShooterGunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRifleShooterGunCall) Do(f func() *guns.Rifle) *MockHelldiverRifleShooterGunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRifleShooterGunCall) DoAndReturn(f func() *guns.Rifle) *MockHelldiverRifleShooterGunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ILoveDemocracy mocks base method.
func (m *MockHelldiverRifleShooter) ILoveDemocracy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ILoveDemocracy")
}

// ILoveDemocracy indicates an expected call of ILoveDemocracy.
func (mr *MockHelldiverRifleShooterMockRecorder) ILoveDemocracy() *MockHelldiverRifleShooterILoveDemocracyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ILoveDemocracy", reflect.TypeOf((*MockHelldiverRifleShooter)(nil).ILoveDemocracy))
	return &MockHelldiverRifleShooterILoveDemocracyCall{Call: call}
}

// MockHelldiverRifleShooterILoveDemocracyCall wrap *gomock.Call
type MockHelldiverRifleShooterILoveDemocracyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRifleShooterILoveDemocracyCall) Return() *MockHelldiverRifleShooterILoveDemocracyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRifleShooterILoveDemocracyCall) Do(f func()) *MockHelldiverRifleShooterILoveDemocracyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRifleShooterILoveDemocracyCall) DoAndReturn(f func()) *MockHelldiverRifleShooterILoveDemocracyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reload mocks base method.
func (m *MockHelldiverRifleShooter) Reload() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockHelldiverRifleShooterMockRecorder) Reload() *MockHelldiverRifleShooterReloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockHelldiverRifleShooter)(nil).Reload))
	return &MockHelldiverRifleShooterReloadCall{Call: call}
}

// MockHelldiverRifleShooterReloadCall wrap *gomock.Call
type MockHelldiverRifleShooterReloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRifleShooterReloadCall) Return(arg0 bool) *MockHelldiverRifleShooterReloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRifleShooterReloadCall) Do(f func() bool) *MockHelldiverRifleShooterReloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRifleShooterReloadCall) DoAndReturn(f func() bool) *MockHelldiverRifleShooterReloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shoot mocks base method.
func (m *MockHelldiverRifleShooter) Shoot(times int, targets ...*import_mode.Enemy) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{times}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shoot", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shoot indicates an expected call of Shoot.
func (mr *MockHelldiverRifleShooterMockRecorder) Shoot(times any, targets ...any) *MockHelldiverRifleShooterShootCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{times}, targets...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shoot", reflect.TypeOf((*MockHelldiverRifleShooter)(nil).Shoot), varargs...)
	return &MockHelldiverRifleShooterShootCall{Call: call}
}

// MockHelldiverRifleShooterShootCall wrap *gomock.Call
type MockHelldiverRifleShooterShootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRifleShooterShootCall) Return(arg0 bool, arg1 error) *MockHelldiverRifleShooterShootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRifleShooterShootCall) Do(f func(int, ...*import_mode.Enemy) (bool, error)) *MockHelldiverRifleShooterShootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRifleShooterShootCall) DoAndReturn(f func(int, ...*import_mode.Enemy) (bool, error)) *MockHelldiverRifleShooterShootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// YouWillNeverDestroyOurWayOfLife mocks base method.
func (m *MockHelldiverRifleShooter) YouWillNeverDestroyOurWayOfLife() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YouWillNeverDestroyOurWayOfLife")
}

// YouWillNeverDestroyOurWayOfLife indicates an expected call of YouWillNeverDestroyOurWayOfLife.
func (mr *MockHelldiverRifleShooterMockRecorder) YouWillNeverDestroyOurWayOfLife() *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YouWillNeverDestroyOurWayOfLife", reflect.TypeOf((*MockHelldiverRifleShooter)(nil).YouWillNeverDestroyOurWayOfLife))
	return &MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall{Call: call}
}

// MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall wrap *gomock.Call
type MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall) Return() *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall) Do(f func()) *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall) DoAndReturn(f func()) *MockHelldiverRifleShooterYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHelldiverRocketMan is a mock of HelldiverRocketMan interface.
type MockHelldiverRocketMan struct {
	ctrl     *gomock.Controller
	recorder *MockHelldiverRocketManMockRecorder
}

// MockHelldiverRocketManMockRecorder is the mock recorder for MockHelldiverRocketMan.
type MockHelldiverRocketManMockRecorder struct {
	mock *MockHelldiverRocketMan
}

// NewMockHelldiverRocketMan creates a new mock instance.
func NewMockHelldiverRocketMan(ctrl *gomock.Controller) *MockHelldiverRocketMan {
	mock := &MockHelldiverRocketMan{ctrl: ctrl}
	mock.recorder = &MockHelldiverRocketManMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelldiverRocketMan) EXPECT() *MockHelldiverRocketManMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHelldiverRocketMan) ISGOMOCK() struct{} {
	return struct{}{}
}

// AvailableStratagems mocks base method.
func (m *MockHelldiverRocketMan) AvailableStratagems() []stratagems.Stratagem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableStratagems")
	ret0, _ := ret[0].([]stratagems.Stratagem)
	return ret0
}

// AvailableStratagems indicates an expected call of AvailableStratagems.
func (mr *MockHelldiverRocketManMockRecorder) AvailableStratagems() *MockHelldiverRocketManAvailableStratagemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableStratagems", reflect.TypeOf((*MockHelldiverRocketMan)(nil).AvailableStratagems))
	return &MockHelldiverRocketManAvailableStratagemsCall{Call: call}
}

// MockHelldiverRocketManAvailableStratagemsCall wrap *gomock.Call
type MockHelldiverRocketManAvailableStratagemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRocketManAvailableStratagemsCall) Return(arg0 []stratagems.Stratagem) *MockHelldiverRocketManAvailableStratagemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRocketManAvailableStratagemsCall) Do(f func() []stratagems.Stratagem) *MockHelldiverRocketManAvailableStratagemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRocketManAvailableStratagemsCall) DoAndReturn(f func() []stratagems.Stratagem) *MockHelldiverRocketManAvailableStratagemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Gun mocks base method.
func (m *MockHelldiverRocketMan) Gun() *guns.RocketLauncher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gun")
	ret0, _ := ret[0].(*guns.RocketLauncher)
	return ret0
}

// Gun indicates an expected call of Gun.
func (mr *MockHelldiverRocketManMockRecorder) Gun() *MockHelldiverRocketManGunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gun", reflect.TypeOf((*MockHelldiverRocketMan)(nil).Gun))
	return &MockHelldiverRocketManGunCall{Call: call}
}

// MockHelldiverRocketManGunCall wrap *gomock.Call
type MockHelldiverRocketManGunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRocketManGunCall) Return(arg0 *guns.RocketLauncher) *MockHelldiverRocketManGunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRocketManGunCall) Do(f func() *guns.RocketLauncher) *MockHelldiverRocketManGunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRocketManGunCall) DoAndReturn(f func() *guns.RocketLauncher) *MockHelldiverRocketManGunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ILoveDemocracy mocks base method.
func (m *MockHelldiverRocketMan) ILoveDemocracy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ILoveDemocracy")
}

// ILoveDemocracy indicates an expected call of ILoveDemocracy.
func (mr *MockHelldiverRocketManMockRecorder) ILoveDemocracy() *MockHelldiverRocketManILoveDemocracyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ILoveDemocracy", reflect.TypeOf((*MockHelldiverRocketMan)(nil).ILoveDemocracy))
	return &MockHelldiverRocketManILoveDemocracyCall{Call: call}
}

// MockHelldiverRocketManILoveDemocracyCall wrap *gomock.Call
type MockHelldiverRocketManILoveDemocracyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRocketManILoveDemocracyCall) Return() *MockHelldiverRocketManILoveDemocracyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRocketManILoveDemocracyCall) Do(f func()) *MockHelldiverRocketManILoveDemocracyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRocketManILoveDemocracyCall) DoAndReturn(f func()) *MockHelldiverRocketManILoveDemocracyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reload mocks base method.
func (m *MockHelldiverRocketMan) Reload() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockHelldiverRocketManMockRecorder) Reload() *MockHelldiverRocketManReloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockHelldiverRocketMan)(nil).Reload))
	return &MockHelldiverRocketManReloadCall{Call: call}
}

// MockHelldiverRocketManReloadCall wrap *gomock.Call
type MockHelldiverRocketManReloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRocketManReloadCall) Return(arg0 bool) *MockHelldiverRocketManReloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRocketManReloadCall) Do(f func() bool) *MockHelldiverRocketManReloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRocketManReloadCall) DoAndReturn(f func() bool) *MockHelldiverRocketManReloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shoot mocks base method.
func (m *MockHelldiverRocketMan) Shoot(times int, targets ...*import_mode.Enemy) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{times}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shoot", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shoot indicates an expected call of Shoot.
func (mr *MockHelldiverRocketManMockRecorder) Shoot(times any, targets ...any) *MockHelldiverRocketManShootCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{times}, targets...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shoot", reflect.TypeOf((*MockHelldiverRocketMan)(nil).Shoot), varargs...)
	return &MockHelldiverRocketManShootCall{Call: call}
}

// MockHelldiverRocketManShootCall wrap *gomock.Call
type MockHelldiverRocketManShootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRocketManShootCall) Return(arg0 bool, arg1 error) *MockHelldiverRocketManShootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRocketManShootCall) Do(f func(int, ...*import_mode.Enemy) (bool, error)) *MockHelldiverRocketManShootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRocketManShootCall) DoAndReturn(f func(int, ...*import_mode.Enemy) (bool, error)) *MockHelldiverRocketManShootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// YouWillNeverDestroyOurWayOfLife mocks base method.
func (m *MockHelldiverRocketMan) YouWillNeverDestroyOurWayOfLife() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YouWillNeverDestroyOurWayOfLife")
}

// YouWillNeverDestroyOurWayOfLife indicates an expected call of YouWillNeverDestroyOurWayOfLife.
func (mr *MockHelldiverRocketManMockRecorder) YouWillNeverDestroyOurWayOfLife() *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YouWillNeverDestroyOurWayOfLife", reflect.TypeOf((*MockHelldiverRocketMan)(nil).YouWillNeverDestroyOurWayOfLife))
	return &MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall{Call: call}
}

// MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall wrap *gomock.Call
type MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall) Return() *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall) Do(f func()) *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall) DoAndReturn(f func()) *MockHelldiverRocketManYouWillNeverDestroyOurWayOfLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPotentialTraitor is a mock of PotentialTraitor interface.
type MockPotentialTraitor struct {
	ctrl     *gomock.Controller
	recorder *MockPotentialTraitorMockRecorder
}

// MockPotentialTraitorMockRecorder is the mock recorder for MockPotentialTraitor.
type MockPotentialTraitorMockRecorder struct {
	mock *MockPotentialTraitor
}

// NewMockPotentialTraitor creates a new mock instance.
func NewMockPotentialTraitor(ctrl *gomock.Controller) *MockPotentialTraitor {
	mock := &MockPotentialTraitor{ctrl: ctrl}
	mock.recorder = &MockPotentialTraitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPotentialTraitor) EXPECT() *MockPotentialTraitorMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockPotentialTraitor) ISGOMOCK() struct{} {
	return struct{}{}
}

// AvailableStratagems mocks base method.
func (m *MockPotentialTraitor) AvailableStratagems() []stratagems.Stratagem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableStratagems")
	ret0, _ := ret[0].([]stratagems.Stratagem)
	return ret0
}

// AvailableStratagems indicates an expected call of AvailableStratagems.
func (mr *MockPotentialTraitorMockRecorder) AvailableStratagems() *MockPotentialTraitorAvailableStratagemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableStratagems", reflect.TypeOf((*MockPotentialTraitor)(nil).AvailableStratagems))
	return &MockPotentialTraitorAvailableStratagemsCall{Call: call}
}

// MockPotentialTraitorAvailableStratagemsCall wrap *gomock.Call
type MockPotentialTraitorAvailableStratagemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPotentialTraitorAvailableStratagemsCall) Return(arg0 []stratagems.Stratagem) *MockPotentialTraitorAvailableStratagemsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPotentialTraitorAvailableStratagemsCall) Do(f func() []stratagems.Stratagem) *MockPotentialTraitorAvailableStratagemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPotentialTraitorAvailableStratagemsCall) DoAndReturn(f func() []stratagems.Stratagem) *MockPotentialTraitorAvailableStratagemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Gun mocks base method.
func (m *MockPotentialTraitor) Gun() *guns.Rifle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gun")
	ret0, _ := ret[0].(*guns.Rifle)
	return ret0
}

// Gun indicates an expected call of Gun.
func (mr *MockPotentialTraitorMockRecorder) Gun() *MockPotentialTraitorGunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gun", reflect.TypeOf((*MockPotentialTraitor)(nil).Gun))
	return &MockPotentialTraitorGunCall{Call: call}
}

// MockPotentialTraitorGunCall wrap *gomock.Call
type MockPotentialTraitorGunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPotentialTraitorGunCall) Return(arg0 *guns.Rifle) *MockPotentialTraitorGunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPotentialTraitorGunCall) Do(f func() *guns.Rifle) *MockPotentialTraitorGunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPotentialTraitorGunCall) DoAndReturn(f func() *guns.Rifle) *MockPotentialTraitorGunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reload mocks base method.
func (m *MockPotentialTraitor) Reload() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockPotentialTraitorMockRecorder) Reload() *MockPotentialTraitorReloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPotentialTraitor)(nil).Reload))
	return &MockPotentialTraitorReloadCall{Call: call}
}

// MockPotentialTraitorReloadCall wrap *gomock.Call
type MockPotentialTraitorReloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPotentialTraitorReloadCall) Return(arg0 bool) *MockPotentialTraitorReloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPotentialTraitorReloadCall) Do(f func() bool) *MockPotentialTraitorReloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPotentialTraitorReloadCall) DoAndReturn(f func() bool) *MockPotentialTraitorReloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Shoot mocks base method.
func (m *MockPotentialTraitor) Shoot(times int, targets ...*import_mode.Enemy) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{times}
	for _, a := range targets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shoot", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shoot indicates an expected call of Shoot.
func (mr *MockPotentialTraitorMockRecorder) Shoot(times any, targets ...any) *MockPotentialTraitorShootCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{times}, targets...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shoot", reflect.TypeOf((*MockPotentialTraitor)(nil).Shoot), varargs...)
	return &MockPotentialTraitorShootCall{Call: call}
}

// MockPotentialTraitorShootCall wrap *gomock.Call
type MockPotentialTraitorShootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPotentialTraitorShootCall) Return(arg0 bool, arg1 error) *MockPotentialTraitorShootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPotentialTraitorShootCall) Do(f func(int, ...*import_mode.Enemy) (bool, error)) *MockPotentialTraitorShootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPotentialTraitorShootCall) DoAndReturn(f func(int, ...*import_mode.Enemy) (bool, error)) *MockPotentialTraitorShootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgitationCampaign is a mock of AgitationCampaign interface.
type MockAgitationCampaign struct {
	ctrl     *gomock.Controller
	recorder *MockAgitationCampaignMockRecorder
}

// MockAgitationCampaignMockRecorder is the mock recorder for MockAgitationCampaign.
type MockAgitationCampaignMockRecorder struct {
	mock *MockAgitationCampaign
}

// NewMockAgitationCampaign creates a new mock instance.
func NewMockAgitationCampaign(ctrl *gomock.Controller) *MockAgitationCampaign {
	mock := &MockAgitationCampaign{ctrl: ctrl}
	mock.recorder = &MockAgitationCampaignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgitationCampaign) EXPECT() *MockAgitationCampaignMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockAgitationCampaign) ISGOMOCK() struct{} {
	return struct{}{}
}

// BecomeAHelldiver mocks base method.
func (m *MockAgitationCampaign) BecomeAHelldiver() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BecomeAHelldiver")
}

// BecomeAHelldiver indicates an expected call of BecomeAHelldiver.
func (mr *MockAgitationCampaignMockRecorder) BecomeAHelldiver() *MockAgitationCampaignBecomeAHelldiverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BecomeAHelldiver", reflect.TypeOf((*MockAgitationCampaign)(nil).BecomeAHelldiver))
	return &MockAgitationCampaignBecomeAHelldiverCall{Call: call}
}

// MockAgitationCampaignBecomeAHelldiverCall wrap *gomock.Call
type MockAgitationCampaignBecomeAHelldiverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgitationCampaignBecomeAHelldiverCall) Return() *MockAgitationCampaignBecomeAHelldiverCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgitationCampaignBecomeAHelldiverCall) Do(f func()) *MockAgitationCampaignBecomeAHelldiverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgitationCampaignBecomeAHelldiverCall) DoAndReturn(f func()) *MockAgitationCampaignBecomeAHelldiverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BecomeAHero mocks base method.
func (m *MockAgitationCampaign) BecomeAHero() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BecomeAHero")
}

// BecomeAHero indicates an expected call of BecomeAHero.
func (mr *MockAgitationCampaignMockRecorder) BecomeAHero() *MockAgitationCampaignBecomeAHeroCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BecomeAHero", reflect.TypeOf((*MockAgitationCampaign)(nil).BecomeAHero))
	return &MockAgitationCampaignBecomeAHeroCall{Call: call}
}

// MockAgitationCampaignBecomeAHeroCall wrap *gomock.Call
type MockAgitationCampaignBecomeAHeroCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgitationCampaignBecomeAHeroCall) Return() *MockAgitationCampaignBecomeAHeroCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgitationCampaignBecomeAHeroCall) Do(f func()) *MockAgitationCampaignBecomeAHeroCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgitationCampaignBecomeAHeroCall) DoAndReturn(f func()) *MockAgitationCampaignBecomeAHeroCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BecomeALegend mocks base method.
func (m *MockAgitationCampaign) BecomeALegend() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BecomeALegend")
}

// BecomeALegend indicates an expected call of BecomeALegend.
func (mr *MockAgitationCampaignMockRecorder) BecomeALegend() *MockAgitationCampaignBecomeALegendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BecomeALegend", reflect.TypeOf((*MockAgitationCampaign)(nil).BecomeALegend))
	return &MockAgitationCampaignBecomeALegendCall{Call: call}
}

// MockAgitationCampaignBecomeALegendCall wrap *gomock.Call
type MockAgitationCampaignBecomeALegendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgitationCampaignBecomeALegendCall) Return() *MockAgitationCampaignBecomeALegendCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgitationCampaignBecomeALegendCall) Do(f func()) *MockAgitationCampaignBecomeALegendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgitationCampaignBecomeALegendCall) DoAndReturn(f func()) *MockAgitationCampaignBecomeALegendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
